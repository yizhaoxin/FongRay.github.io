<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[一些API接口汇总]]></title>
    <url>%2F2017%2F10%2F13%2Fsome-free-apis%2F</url>
    <content type="text"><![CDATA[汇总一些免费的API接口，可以用来做一些工具类APP。 接口商店聚合数据号称数据银行，API非常丰富。 百度API Store根据访问次数收费。 WebXml服务很不错，免费的服务。 参考 public-apis 知乎专栏]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>Resouces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 完全手册]]></title>
    <url>%2F2017%2F10%2F12%2Fmarkdown-tutorial%2F</url>
    <content type="text"><![CDATA[速查手册*斜体* ~&gt; 斜体 **粗体** ~&gt; 粗体 ***粗斜体*** ~&gt; 粗斜体 ~~删除线~~ ~&gt; 删除线 *** ~&gt; 分割线 # 一级标题 ###### 六级标题 [超链接](http://fangr.cc/) ~&gt; 超链接 [超链接][1] [1]:http://fangr.cc ~&gt; 超链接 &lt;http://fangr.cc/&gt; ~&gt; http://fangr.cc/ */+/- 无序列表 ~&gt; 无序列表 无序列表 1. 有序列表 ~&gt; 有序列表 有序列表 &gt;&gt;&gt; 引用 ~&gt; 多层引用 多层引用 ![图片alt](图片url &quot;图片title&quot;) 锚点: [速查手册](#速查手册) -&gt; 速查手册 整理版原作者: HaoqiangChen, LeaNote 目录1有些编辑器使用`[TOC]`可以直接生成目录, 但原生并不支持。 0. 目录1. 分级标题2. 斜体和粗体3. 超链接 3.1 行内式3.2 参考式3.3 自动链接 4. 锚点5. 列表 5.1 无序列表5.2 有序列表5.3 定义型列表5.4 列表缩进5.5 包含段落的列表5.6 包含引用的列表5.7 包含代码区块的引用5.8 一个特殊情况 6. 引用 6.1 引用的多层嵌套6.2 引用其它要素 7. 插入图像 7.1 行内式7.2 参考式 8. 分隔线和预格式化 8.1 分隔线8.2 预格式化 9. 表格10. 注脚11. LaTeX公式 11.1 $表示行内公式11.2 $$表示整行公式 12. 流程图13. 代码 13.1 行内式13.2 缩进式多行代码13.3 包裹多行代码13.4 HTML原始码 分级标题第一种写法: 12345这是一个一级标题============================这是一个二级标题-------------------------------------------------- 第二种写法:12345678# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题一级标题字号最大, 依级递减。 显示效果:&lt;!- ignore -&gt; 斜体和粗体代码: 12345678Markdown 使用星号（*）和底线（_）作为标记强调字词的符号, 被 * 或 _ 包围的字词会被转成用 &lt;em&gt; 标签包围, 用两个 * 或 _ 包起来的话, 则会被转成 &lt;strong&gt;, 例如:*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~但是目前MarkdownPad2和GitHub的Markdown并不支持~~删除线~~这个语法功能, 可以用html的&lt;del&gt;&lt;/del&gt;或&lt;s&gt;&lt;/s&gt;代替。 显示效果: 这是一段斜体 这是一段粗体 这是一段加粗斜体 这是一段删除线 超链接Markdown 支持两种形式的链接语法: 行内式和参考式两种形式, 行内式一般使用较多。 行内式语法说明: []里写链接文字, ()里写链接地址, ()里面” “中的内容可以为链接指定title属性, title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。[链接文字](链接地址 “链接标题”)这样的形式。链接地址与链接标题前有一个空格。 代码: 123欢迎来到[Markdown语法篇](https://github.com/HaoqiangChen/Hq-note/tree/master/Markdown)欢迎来到[Markdown语法篇](https://github.com/HaoqiangChen/Hq-note/tree/master/Markdown &quot;Markdown语法篇&quot;) 显示效果: 欢迎来到Markdown语法篇 欢迎来到Markdown语法篇 参考式参考式超链接一般用在学术论文上面, 或者另一种情况, 如果某一个链接在文章中多处使用, 那么使用引用 的方式创建链接将非常好, 它可以让你对链接进行统一的管理。 语法说明: 参考式链接分为两部分, 文中的写法 [链接文字][链接标记], 在文本的任意位置添加[链接标记]:链接地址 &#34;链接标题&#34;, 链接地址与链接标题前有一个空格。 如果链接文字本身可以做为链接标记, 你也可以写成[链接文字][][链接文字]:链接地址的形式, 见代码的最后一行。 代码: 12345678欢迎阅读本[Markdown语法篇][1], 还有这几篇高手总结的也不错:[入门篇][2]、[简明版][3]、[完整版][4], 我就喜欢把百家汇成[自己一家][]^_^。[1]:https://github.com/HaoqiangChen/Hq-note/tree/master/Markdown &quot;Markdown语法篇&quot;[2]:https://sspai.com/post/25137 &quot;入门篇&quot;[3]:http://wowubuntu.com/Markdown/index.html &quot;简明版&quot;[4]:http://blog.leanote.com/post/freewalk/Markdown-语法手册 &quot;完整版&quot;[自己一家]:https://github.com/HaoqiangChen/Hq-note/tree/master/Markdown 显示效果: 欢迎阅读本Markdown语法篇, 还有这几篇高手总结的也不错:入门篇、简明版、完整版, 我就喜欢把百家汇成自己一家^_^。 自动链接语法说明:Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱, 只要是用&lt;&gt;包起来,Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样, 例如: 代码: 12&lt;http://example.com/&gt;&lt;address@example.com&gt; 显示效果: http://example.com/&#x61;&#x64;&#100;&#x72;&#x65;&#x73;&#x73;&#64;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109; 锚点网页中, 锚点其实就是页内超链接, 也就是链接本文档内部的某些元素, 实现当前页面中的跳转。比如我这里写下一个锚点, 点击回到目录, 就能跳转到目录。 在目录中点击这一节, 就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。 注意: Markdown Extra 只支持在标题后插入锚点, 其它地方无效。 Leanote 编辑器右侧显示效果区域暂时不支持锚点跳转, 所以点来点去发现没有跳转不必惊慌, 但是你发布成笔记或博文后是支持跳转的。 非常遗憾的是, 目前MarkdownPad2和GitHub的Markdown并不支持[TOC]目录和锚点这个功能, 暂时只能用HTML的标签id来使用页内跳转。 语法描述: 使用[TOC]标记编辑器会把所有标题写到目录大纲中。 在你准备跳转到的指定标题后插入锚点{\#标记}, 然后在文档的其它地方写上连接到锚点的链接。 直接HTML语法锚点功能。 而说到这个就有一个值得一提的地方了, 就是如何在GitHub上也能实现页面跳转, 原先我用的是HTML的a标签锚点, 并且自己给每个标题套上个span#id, 但是发现在gitbook可以有效果, 但是在GitHub上不行, 后面发现这个原生Markdown会自动帮你处理, 自动转成 HTML 实体, 然后我就去看是怎么转化的, 发现它转化每个标题的同时都会赋予一个ID, 那么我们完全直接拿这个ID来做锚点, 至于怎么拿到这个ID, 这个应该就不用我说了吧, 会点编程都知道, 直接打开chrome或者Firefox等调试工具就可以看到了。 代码: 1234567## 0. 目录&#123;#index&#125;[TOC]上面这两种方法原生Markdown都不支持, 但是第一种在gitbook居然有效果, 可惜在GitHub还是没有效果&lt;span id=&quot;#index&quot;&gt;&lt;/span&gt;跳转到[目录](#目录) 显示效果: 跳转到目录 列表无序列表使用 *, +, - 表示无序列表, 三个都显示为实心圆点。 代码: 123- 无序列表项 一- 无序列表项 二- 无序列表项 三 显示效果: 无序列表项 一 无序列表项 二 无序列表项 三 有序列表有序列表则使用数字接着一个英文句点再加个空格。 代码: 1231. 有序列表项 一2. 有序列表项 二3. 有序列表项 三 显示效果: 有序列表项 一 有序列表项 二 有序列表项 三 定义型列表语法说明: 定义型列表由名词和解释组成。一行写上定义, 紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab) 代码: 1234567Markdown:轻量级文本标记语言, 可以转换成html, pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2:这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）代码块（左侧有八个不可见的空格） 显示效果: Markdown:轻量级文本标记语言, 可以转换成html, pdf等格式(没效果, 可能又是不支持吧) 代码块 2: 这是代码块的定义(没效果, 可能又是不支持吧) 代码块（左侧有八个不可见的空格） 注:方法一和二在马克飞象编辑器是有效果的, 但是gitbook没有, 可能又是不支持, 至于有没有什么方法可以实现我也不知道- -！ 列表缩进语法说明: 列表项目标记通常是放在最左边, 但是其实也可以缩进, 最多 3 个空格, 项目标记后面则一定要接着至少一个空格或制表符。 要让列表看起来更漂亮, 你可以把内容用固定的缩进整理好（显示效果与代码一致）:但是可能又是不支持缘故, gitbook需要每一行末尾空两空格换行才行。 1234567*轻轻的我走了,正如我轻轻的来； 我轻轻的招手,作别西天的云彩。 那河畔的金柳,是夕阳中的新娘； 波光里的艳影,在我的心头荡漾。 软泥上的青荇,油油的在水底招摇； 在康河的柔波里,我甘心做一条水草！*那榆荫下的一潭,不是清泉,是天上虹； 揉碎在浮藻间,沉淀着彩虹似的梦。 寻梦？撑一支长篙,向青草更青处漫溯； 满载一船星辉,在星辉斑斓里放歌。 但我不能放歌,悄悄是别离的笙箫； 夏虫也为我沉默,沉默是今晚的康桥！ 悄悄的我走了,正如我悄悄的来； 我挥一挥衣袖,不带走一片云彩。 但是如果你懒, 那也行:代码:1234567* 轻轻的我走了,正如我轻轻的来； 我轻轻的招手,作别西天的云彩。那河畔的金柳,是夕阳中的新娘； 波光里的艳影,在我的心头荡漾。软泥上的青荇,油油的在水底招摇； 在康河的柔波里,我甘心做一条水草！* 那榆荫下的一潭,不是清泉,是天上虹； 揉碎在浮藻间,沉淀着彩虹似的梦。寻梦？撑一支长篙,向青草更青处漫溯； 满载一船星辉,在星辉斑斓里放歌。但我不能放歌,悄悄是别离的笙箫； 夏虫也为我沉默,沉默是今晚的康桥！悄悄的我走了,正如我悄悄的来； 我挥一挥衣袖,不带走一片云彩。 显示效果: 轻轻的我走了,正如我轻轻的来； 我轻轻的招手,作别西天的云彩。那河畔的金柳,是夕阳中的新娘； 波光里的艳影,在我的心头荡漾。软泥上的青荇,油油的在水底招摇； 在康河的柔波里,我甘心做一条水草！ 那榆荫下的一潭,不是清泉,是天上虹； 揉碎在浮藻间,沉淀着彩虹似的梦。寻梦？撑一支长篙,向青草更青处漫溯； 满载一船星辉,在星辉斑斓里放歌。但我不能放歌,悄悄是别离的笙箫； 夏虫也为我沉默,沉默是今晚的康桥！悄悄的我走了,正如我悄悄的来； 我挥一挥衣袖,不带走一片云彩。 包含段落的列表语法说明: 列表项目可以包含多个段落, 每个项目下的段落都必须缩进 4 个空格或是 1 个制表符（显示效果与代码一致）:但是可能又是不支持缘故, gitbook需要每一行末尾空两空格换行才行。 123456789* 轻轻的我走了,正如我轻轻的来； 我轻轻的招手,作别西天的云彩。那河畔的金柳,是夕阳中的新娘； 波光里的艳影,在我的心头荡漾。软泥上的青荇,油油的在水底招摇； 在康河的柔波里,我甘心做一条水草！那榆荫下的一潭,不是清泉,是天上虹； 揉碎在浮藻间,沉淀着彩虹似的梦。寻梦？撑一支长篙,向青草更青处漫溯； 满载一船星辉,在星辉斑斓里放歌。但我不能放歌,悄悄是别离的笙箫； 夏虫也为我沉默,沉默是今晚的康桥！* 悄悄的我走了,正如我悄悄的来； 我挥一挥衣袖,不带走一片云彩。 如果你每行都有缩进, 看起来会看好很多, 当然, 再次地, 如果你很懒惰, Markdown 也允许: 代码: 12345678910* 轻轻的我走了,正如我轻轻的来； 我轻轻的招手,作别西天的云彩。那河畔的金柳,是夕阳中的新娘； 波光里的艳影,在我的心头荡漾。软泥上的青荇,油油的在水底招摇； 在康河的柔波里,我甘心做一条水草！那榆荫下的一潭,不是清泉,是天上虹； 揉碎在浮藻间,沉淀着彩虹似的梦。寻梦？撑一支长篙,向青草更青处漫溯； 满载一船星辉,在星辉斑斓里放歌。但我不能放歌,悄悄是别离的笙箫； 夏虫也为我沉默,沉默是今晚的康桥！* 悄悄的我走了,正如我悄悄的来； 我挥一挥衣袖,不带走一片云彩。 显示效果: 轻轻的我走了,正如我轻轻的来； 我轻轻的招手,作别西天的云彩。那河畔的金柳,是夕阳中的新娘； 波光里的艳影,在我的心头荡漾。软泥上的青荇,油油的在水底招摇； 在康河的柔波里,我甘心做一条水草！ 那榆荫下的一潭,不是清泉,是天上虹； 揉碎在浮藻间,沉淀着彩虹似的梦。寻梦？撑一支长篙,向青草更青处漫溯； 满载一船星辉,在星辉斑斓里放歌。但我不能放歌,悄悄是别离的笙箫； 夏虫也为我沉默,沉默是今晚的康桥！ 悄悄的我走了,正如我悄悄的来； 我挥一挥衣袖,不带走一片云彩。 包含引用的列表语法说明: 如果要在列表项目内放进引用, 那在 &gt; 前面需要缩进: 代码: 1234* 阅读的方法:&gt; 打开书本。&gt; 打开电灯。 显示效果: 阅读的方法: 打开书本。打开电灯。 包含代码区块的引用语法说明:如果要放代码区块的话, 该区块就需要缩进两次, 也就是 8 个空格或是 2 个制表符: 一列表项包含一个列表区块: &lt;代码写在这&gt; 一个特殊情况在特殊情况下, 项目列表很可能会不小心产生, 像是下面这样的写法: 11986. What a great season. 会显示成: What a great season. 换句话说, 也就是在行首出现数字-句点-空白, 要避免这样的状况, 你可以在句点前面加上反斜杠: 11986\. What a great season. 会显示成: 1986. What a great season. 引用语法说明: 引用需要在被引用的文本前加上&gt;符号。 代码: 123456&gt; 这是一个有两段文字的引用,&gt; 无意义的占行文字1.&gt; 无意义的占行文字2.&gt;&gt; 无意义的占行文字3.&gt; 无意义的占行文字4. 显示效果: 这是一个有两段文字的引用,无意义的占行文字1.无意义的占行文字2. 无意义的占行文字3.无意义的占行文字4. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; : 代码: 123456&gt; 这是一个有两段文字的引用,无意义的占行文字1.无意义的占行文字2.&gt; 无意义的占行文字3.无意义的占行文字4. 显示效果: 这是一个有两段文字的引用,无意义的占行文字1.无意义的占行文字2. 无意义的占行文字3.无意义的占行文字4. 引用的多层嵌套区块引用可以嵌套（例如:引用内的引用）, 只要根据层次加上不同数量的 &gt; : 代码: 12345&gt;&gt;&gt; 请问 Markdwon 怎么用？ - 小白&gt;&gt; 自己看教程！ - 愤青&gt; 教程在哪？ - 小白 显示效果: 请问 Markdwon 怎么用？ - 小白 自己看教程！ - 愤青 教程在哪？ - 小白 引用其它要素引用的区块内也可以使用其他的 Markdown 语法, 包括标题、列表、代码区块等: 代码: 123456&gt; 1. 这是第一行列表项。&gt; 2. 这是第二行列表项。&gt;&gt; 给出一些例子代码:&gt;&gt; return shell_exec(&quot;echo $input | $Markdown_script&quot;); 显示效果: 这是第一行列表项。 这是第二行列表项。 给出一些例子代码: return shell_exec(“echo $input | $Markdown_script”); 插入图像图片的创建方式与超链接相似, 而且和超链接一样也有两种写法, 行内式和参考式写法。 语法中图片Alt的意思是如果图片因为某些原因不能显示, 就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样, 表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的, 可以省略, 但建议写上。 行内式语法说明:![图片Alt](图片地址 “图片Title”) 代码: 12美丽花儿:![美丽花儿](https://raw.githubusercontent.com/HaoqiangChen/Hq-note/master/asset/Markdown/img/flower.jpg &quot;美丽花儿&quot;) 显示效果: 美丽花儿: 参考式语法说明: 在文档要插入图片的地方写![图片Alt][标记] 在文档的最后写上[标记]:图片地址 “Title” 代码: 1234美丽花儿:![美丽花儿][flower][flower]:https://raw.githubusercontent.com/HaoqiangChen/Hq-note/master/asset/Markdown/img/flower.jpg &quot;美丽花儿&quot; 显示效果: 美丽花儿: 分隔线和预格式化分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线, 行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线: 代码: 123456789* * *********- - ---------------------------------------- 显示效果都一样: 预格式化用```+中间你所想注释的内容或代码+```包裹:预格式化, 可用于Markdown里面的注释, 解释说明什么的Markdown的预格式化 相当于HTML的&lt;pre&gt;&lt;/pre&gt;预格式化,不过Markdown这个除了预格式化之外还会添加了一个背景色与其他内容区分开, 相当好用。 表格语法说明: 不管是哪种方式, 第一行为表头, 第二行分隔表头和主体部分, 第三行开始每一行为一个表格行。 列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。 第二行还可以为不同的列指定对齐方向。默认为左对齐, 在-符号右边加上冒号: 就会右对齐。 代码: 简单方式写表格: 12345学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92 原生方式写表格: 12345|学号|姓名|分数||-|-|-||小明|男|75||小红|女|79||小陆|男|92| 为表格第二列指定方向: 1234产品|价格-|-:Leanote 高级账号|60元/年Leanote 超级账号|120元/年 显示效果:简单方式写表格: 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 原生方式写表格: 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 为表格第二列指定方向: 产品 价格 Leanote 高级账号 60元/年 Leanote 超级账号 120元/年 注脚语法说明: 在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注, 脚注前必须有对应的脚注名字。 注意:经测试注脚与注脚之间必须空一行, 不然会失效。成功后会发现, 即使你没有把注脚写在文末, 经Markdown转换后, 也会自动归类到文章的最后。 代码: 123456789使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。[^1]:Markdown是一种纯文本标记语言[^2]:HyperText Markup Language 超文本标记语言[^Le]:开源笔记平台, 支持Markdown和笔记直接发为博文**注:脚注自动被搬运到最后面, 请到文章末尾查看, 并且脚注后方的链接可以直接跳转回到加注的地方。** 显示效果: 注:因为Markdown是没有一个所谓的规范的(Markdown官网都不支持这么做), 因此导致gitbook没有目录[TOC]和注脚功能, 所以某些特性功能需要写作工具自己支持才可以, 像马克飞象和Leanote就可以。 LaTeX公式$表示行内公式代码: 1质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 显示效果： 质能守恒方程可以用一个很简洁的方程式 E=mc2来表达。 注: 原生不支持LaTeX公式。可以用codecogs的云服务, 在线LaTeX数学公式编辑工具, api+一大串LaTex, 比如: 当然这么强大的在线公式编辑器肯定提供了在线GUI给大家, 打开网址: http://www.codecogs.com/latex/eqneditor.php, 你就可以随心所欲的编辑公式了, 它同样想Mathtype一样提供了不少模板, 直接编辑, 也很方便。编辑完成之后, 页面上就会实时得到编辑的Latex格式公式图片。 或者:http://latex.codecogs.com/ 这个网址的使用方法:![](http://latex.codecogs.com/gif.latex?\\frac{1}{1+sin(x)}\) -&gt; 所以, 上面的例子可以修改为 质能守恒方程可以用一个很简洁的方程式 ![](http://latex.codecogs.com/gif.latex?E=mc^2) 来表达。 显示效果: 质能守恒方程可以用一个很简洁的方程式 来表达。 $$表示整行公式代码: 12345$$\sum_&#123;i=1&#125;^n a_i=0$$$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$$$\sum^&#123;j-1&#125;_&#123;k=0&#125;&#123;\widehat&#123;\gamma&#125;_&#123;kj&#125; z_k&#125;$$ 同上, 原生不支持, 使用上面的网站即可。 显示效果: 访问 MathJax 参考更多使用方法。 流程图代码: 1234567891011flowst=&gt;start: Start:&gt;https://www.zybuluo.comio=&gt;inputoutput: verificationop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?sub=&gt;subroutine: Your Subroutinee=&gt;endst-&gt;io-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;sub-&gt;io 显示效果: Created with Raphaël 2.1.0https://www.zybuluo.comStarthttps://www.zybuluo.comverificationYour OperationYes or No?EndYour Subroutineyesno 从上面的例子可以看出原生对流程图同样也是不支持, 所以只能采取迂回取巧方法了, 就是用一些支持流程图的编辑器先画出来, 然后截图放到这个不支持的页面上 更多语法参考:流程图语法参考 代码对于程序员来说这个功能是必不可少的, 插入程序代码的方式有两种, 一种是利用缩进(Tab),另一种是利用”`”符号（一般在ESC键下方）包裹代码。 语法说明: 插入行内代码, 即插入一个单词或者一句代码的情况, 使用`code`这样的形式插入。 插入多行代码, 可以使用缩进或者“` code “`,具体看示例。 注意: 缩进式插入前方必须有空行 行内式代码: 1C语言里的函数 `scanf()` 怎么使用？ 显示效果: C语言里的函数 scanf() 怎么使用？ 缩进式多行代码缩进 4 个空格或是 1 个制表符 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 代码: 12345#include &lt;stdio.h&gt;;int main(void)&#123;printf(&quot;Hello world\n&quot;);&#125; 显示效果: #include ;int main(void){printf(“Hello world\n”);} 包裹多行代码代码: 12345#include &lt;stdio.h&gt;;int main(void)&#123;printf(&quot;Hello world\n&quot;);&#125; 显示效果: 12345#include &lt;stdio.h&gt;;int main(void)&#123;printf(&quot;Hello world\n&quot;);&#125; HTML原始码在代码区块里面,&amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体, 这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码, 只需要复制贴上, 剩下的 Markdown 都会帮你处理, 例如: Tip: 值得注意的是，Markdown对空格、空行很敏感，在解析成HTML时会自动添加一些\标签导致出现大段空白，所以HTML块要尽量紧凑。 代码: 第一个例子:1&lt;div&gt;&amp;copy; 2007 Foo Corporation&lt;/div&gt; 第二个例子:1&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th rowspan="2"&gt;值班人员&lt;/th&gt;&lt;th&gt;星期一&lt;/th&gt;&lt;th&gt;星期二&lt;/th&gt;&lt;th&gt;星期三&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;李强&lt;/td&gt;&lt;td&gt;张明&lt;/td&gt;&lt;td&gt;王平&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; 显示效果: 第一个例子: &copy; 2007 Foo Corporation 第二个例子: 值班人员星期一星期二星期三李强张明王平 – EOF –]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客迁移到Hexo遇到的一些问题]]></title>
    <url>%2F2017%2F09%2F27%2Fhexo-workflow%2F</url>
    <content type="text"><![CDATA[关于Hexo如何使用，网上已经有很多教程了，不再赘述。涉及的几个相关命令也就是: 1234$ npm install -g hexo$ hexo init$ hexo generate (hexo g)$ hexo server (hexo s) 正常情况下，这样就会启动本地的服务:http://localhost:4000，但现实总是残酷的， 由于国内XXX的网络环境，总会遇到各种各样的问题， 下面总结一下本博客迁移到Hexo过程中遇到的一些问题。 NPM 源node的包管理工具npm，默认使用国外的源，访问比较慢，建议换成国内源，一般是淘宝npm:1$ npm install -g cnpm --registry=https://registry.npm.taobao.org 这样就可以使用cnpm代替npm进行模块安装了:1$ cnpm install [name] 或者，使用nrm (npm的源管理工具):1234567891011$ npm install nrm$ nrm ls* npm ---- https://registry.npmjs.org/ cnpm --- http://r.cnpmjs.org/ taobao - https://registry.npm.taobao.org/ nj ----- https://registry.nodejitsu.com/ rednpm - http://registry.mirror.cqupt.edu.cn/ npmMirror https://skimdb.npmjs.com/registry/ edunpm - http://registry.enpmjs.org/$ nrm use taobao$ nrm test taobao Hexo 安装hexo-serverhexo server执行失败:1ERROR Plugin load filed: hexo-server 需要单独安装hexo-server:1$ npm install hexo-server --save node-sass1$ npm intall node-sass --save 如果出现如下情况:1234567891011121314151617$ node scripts/install.jsCannot download &quot;https://github.com/sass/node-sass/releases/download/v4.5.3/darwin-x64-51_binding.node&quot;: read ECONNRESETHint: If github.com is not accessible in your location try setting a proxy via HTTP_PROXY, e.g. export HTTP_PROXY=http://example.com:1234or configure npm proxy via npm config set proxy http://example.com:8080$ node-sass@4.5.3 postinstall /private/tmp/node_modules/node-sass$ node scripts/build.js 说明github访问比较慢，两种方法： 修改host: http://tool.chinaz.com/dns?type=1&amp;host=github.com&amp;ip=找一个TTL比较小的host，如: 1192.30.255.112 github.com 直接去github下载 https://github.com/sass/node-sass/releases/download/v4.5.3/darwin-x64-51_binding.node然后将该文件放到目录:~/.npm/node-sass/4.5.3/darwin-x64-51_binding.node再执行安装命令 1$ npm intall node-sass --save hexo-renderer-scss有些主题需要安装hexo-renderer-scss:1$ npm install hexo-renderer-scss --save 会出现错误:1234ERROR Plugin load failed: hexo-renderer-scssError: ENOENT: no such file or directory, scandir &apos;xxx/node_modules/node-sass/vendor&apos; at Object.fs.readdirSync (fs.js:914:18) ... 提示这个目录找不到，那我们手动创建好了:12$ mkdir xxx/node_modules/node-sass/vendor$ mkdir xxx/node_modules/hexo-renderer-scss/node_modules/node-sass/vendor 接下来还是报错:12345ERROR Plugin load failed: hexo-renderer-scssError: Missing binding xxx/node_modules/hexo-renderer-scss/node_modules/node-sass/vendor/darwin-x64-51/binding.nodeNode Sass could not find a binding for your current environment: OS X 64-bit with Node.js 7.xFound bindings for the following environments: 到这个目录下，把刚刚下载的darwin-x64-51_binding.node重命名复制进去好了:12$ mkdir xxx/node_modules/hexo-renderer-scss/node_modules/node-sass/vendor/darwin-x64-51/$ cp darwin-x64-51_binding.node xxx/node_modules/hexo-renderer-scss/node_modules/node-sass/vendor/darwin-x64-51/binding.node 页面空白有时执行hexo s后显示服务启动，但页面打开空白，显示Cannot GET /，这种情况有很多原因， 可以尝试:1234$ npm install$ hexo cl$ hexo g$ hexo s 如果还有问题，查看一下npm插件是否安装正常:12345678910111213141516171819$ npm ls --depth 0hexo-site@0.0.0 xxx├── hexo@3.3.9├── hexo-deployer-git@0.3.1├── hexo-generator-archive@0.1.4├── hexo-generator-baidu-sitemap@0.1.2├── hexo-generator-category@0.1.3├── hexo-generator-feed@1.2.2├── hexo-generator-index@0.2.1├── hexo-generator-sitemap@1.2.0├── hexo-generator-tag@0.2.0├── hexo-renderer-ejs@0.3.1├── hexo-renderer-marked@0.3.0├── hexo-renderer-scss@1.0.3├── hexo-renderer-stylus@0.3.3├── hexo-server@0.2.2└── node-sass@4.5.3npm ERR! invalid: hexo-generator-baidu-sitemap@0.0.8 xxx/node_modules/hexo-generator-baidu-sitemap/node_modules/hexo-generator-baidu-sitemap 可以看到hexo-generator-baidu-sitemap这个插件安装失败了，尝试重新安装或者删除它:12$ npm install hexo-generator-baidu-sitemap --save$ npm uninstall hexo-generator-baidu-sitemap 或者在package.json中将它删除掉。]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Objective-C中如何定义Block]]></title>
    <url>%2F2017%2F05%2F31%2Fhow-to-declare-block-in-oc%2F</url>
    <content type="text"><![CDATA[Declaration As a local variable: 1returnType (^blockName)(parameterTypes) = ^returnType(parameters) &#123;...&#125;; As a property: 1@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes); As a method parameter: 1- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName; As an argument to a method call: 1[someObject someMethodThatTakesABlock:^returnType (parameters) &#123;...&#125;]; As a typedef: 12typedef returnType (^TypeName)(parameterTypes);TypeName blockName = ^returnType(parameters) &#123;...&#125;; Hint block在ARC下是否声明为copy属性 It is still a good idea to declare block properties as having copy semantics since a block assigned to a strong property will in fact be copied. Apple recommends this as well: You should specify copy as the property attribute, because a block needs to be copied to keep track of its captured state outside of the original scope. This isn’t something you need to worry about when using Automatic Reference Counting, as it will happen automatically, but it’s best practice for the property attribute to show the resultant behavior.]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Block</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用VS2013分析程序CPU占用]]></title>
    <url>%2F2016%2F08%2F08%2Fdetect-cpu-usage-with-vs2013%2F</url>
    <content type="text"><![CDATA[最近开发的一个程序，用户反馈CPU占用非常高，基本把一个内核占用满了。 我自己在虚拟机中试了下，确实这样！ 在用户机器中获取了DUMP，只看到有几个线程一直在跑，调用堆栈中也看不到太多信息（主要是没有线程CPU占用信息），一时没有方法。 今天突然想到VS2013，新版本增加了一些功能，貌似有性能分析相关的。 找了一下，果然在调试菜单下发现了性能与诊断： 选择CPU使用率，就开始分析啦！ 很快就给出了分析结果： 哈哈！瞬间定位CPU占用元凶，原来是一个后台线程一直在跑（空转），设计不合理。这个线程最早设计成自驱动的，找到原因就好办了，改成被驱动式就行了！]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Virtual Studio</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何学习Python爬虫]]></title>
    <url>%2F2016%2F07%2F14%2Fhow-to-learn-web-spider-with-python%2F</url>
    <content type="text"><![CDATA[转载自知乎专栏学习编程 感谢作者路人甲的整理 如何学习python爬虫[入门篇]？想写这么一篇文章，但是知乎社区爬虫大神很多，光是整理他们的答案就够我这篇文章的内容了。对于我个人来说我更喜欢那种非常实用的教程，这种教程对于想直接上手爬虫做一些小东西的朋友来说是极好的。 用一个精彩的回答作为开头：如何入门 python 爬虫？ - 谢科的回答 如果你想学习编程，但是找不到学习路径和资源，欢迎关注专栏：学习编程 python爬虫学习教程 来自博客：http://cuiqingcai.com/1052.html 一、爬虫入门 python爬虫入门一之综述 python爬虫入门二之爬虫基础了解 python爬虫入门三之urllib库的基本使用 python爬虫入门四之urllib库的高级用法 python爬虫入门五之urlerror异常处理 python爬虫入门六之cookie的使用 python爬虫入门七之正则表达式 二、爬虫实战 python爬虫实战一之爬取糗事百科段子 python爬虫实战二之爬取百度贴吧帖子 python爬虫实战三之实现山东大学无线网络掉线自动重连 python爬虫实战四之抓取淘宝mm照片 python爬虫实战五之模拟登录淘宝并获取所有订单 python爬虫实战六之抓取爱问知识人问题并保存至数据库 python爬虫实战七之计算大学本学期绩点 python爬虫实战八之利用selenium抓取淘宝匿名旺旺 三、爬虫利器 python爬虫利器一之requests库的用法 python爬虫利器二之beautiful soup的用法 python爬虫利器三之xpath语法与lxml库的用法 python爬虫利器四之phantomjs的用法 python爬虫利器五之selenium的用法 python爬虫利器六之pyquery的用法 四、爬虫进阶 python爬虫进阶一之爬虫框架概述 python爬虫进阶二之pyspider框架安装配置 python爬虫进阶三之爬虫框架scrapy安装配置 python爬虫进阶四之pyspider的用法 python爬虫入门教程 来自CSDN专栏：http://blog.csdn.net/column/details/why-bug.html [python]网络爬虫（一）：抓取网页的含义和url基本构成 [Python]网络爬虫（二）：利用urllib2通过指定的URL抓取网页内容 [Python]网络爬虫（三）：异常的处理和HTTP状态码的分类 [Python]网络爬虫（四）：Opener与Handler的介绍和实例应用 [Python]网络爬虫（五）：urllib2的使用细节与抓站技巧 [Python]网络爬虫（六）：一个简单的百度贴吧的小爬虫 [Python]网络爬虫（七）：Python中的正则表达式教程 [Python]网络爬虫（八）：糗事百科的网络爬虫（v0.3）源码及解析(简化更新) [Python]网络爬虫（九）：百度贴吧的网络爬虫（v0.4）源码及解析 [Python]网络爬虫（十）：一个爬虫的诞生全过程（以山东大学绩点运算为例） [Python]网络爬虫（十一）：亮剑！爬虫框架小抓抓Scrapy闪亮登场！ [Python]网络爬虫（十二）：爬虫框架Scrapy的第一个爬虫示例入门教程 实战练习 来自CSDN博客：http://blog.csdn.net/cwyalpha/ Python爬虫学习记录（0）——Python 爬虫抓站 记录（虾米，百度，豆瓣，新浪微博） Python爬虫学习记录（1）——Xiami全站播放数 Python爬虫学习记录（2）——LDA处理歌词 百度音乐带标签，作曲，演唱者，类别的歌词数据 Python爬虫学习记录（4）——传说中的足彩倍投法。。好像也不是那么靠谱 2011~2013.5全球所有足球比赛比分数据以及足彩各公司盘口 Python爬虫学习记录（3）——用Python获取虾米加心歌曲，并获取MP3下载地址 Python爬虫学习记录（5）——python mongodb + 爬虫 + web.py 的acfun视频排行榜 来自博客：http://aljun.me/ 爬虫教程（1）基础入门 爬虫教程（2）性能进阶 知乎用户信息爬虫（规模化爬取） 用scrapy爬取豆瓣电影新片榜 用scrapy对豆瓣top250页面爬取（多页面爬取） 用scrapy自动爬取下载图片 用scrapy自动下载石原sama的豆瓣影人图集(727张图片，自动下载）]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本地安装Jekyll调试环境（Windows）]]></title>
    <url>%2F2016%2F06%2F05%2Finstall-jekyll-locally%2F</url>
    <content type="text"><![CDATA[安装Ruby和Ruby DevKit Ruby 2.2.4 Ruby DevKit 切换到安装目录： 123$ cd C:\RubyDevKit$ ruby dk.rb init$ ruby dk.rb install 安装Jekyll 12$ gem install jekyll$ gem install wdm 切换到博客目录运行 12$ jekyll build [--watch/-w]$ jekyll serve [--watch/-w] 用浏览器打开http://127.0.0.1:4000，即可看到效果，而且在修改文件的同时刷新页面即可实时更新。 可以通过–port 888指定端口号，更多命令行参数参考官方手册 安装有问题，可以参考更多文档： Running Jekyll on Windows Jekyll Windows Setup Jekyll on Windows]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>Jekyll</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[介绍几个常用的vim插件]]></title>
    <url>%2F2016%2F06%2F03%2Fsome-vim-plugins%2F</url>
    <content type="text"><![CDATA[vim-multiple-cursors编辑同一变量def hello(poorly_named_var) poorly_named_var ||= &quot;Nameless&quot; puts(&quot;Hi, &quot; + poorly_named_var) end 命令：2Gfp&lt;C-n&gt;&lt;C-n&gt;&lt;C-n&gt;cname 解释：到第二行，fp找到p，三次选中三个单词，c进入编辑 多行操作 I_ Mon Tue Wed Thu Fri Sat Sun 命令：2Gvip&lt;C-n&gt;i&quot;&lt;Right&gt;&lt;Right&gt;&lt;Right&gt;&quot;,&lt;Esc&gt;vipJ$r]Idays = [ 解释： 2Gvip到第二行，全选 i在所有行开头插入光标，输入” 移动到行尾，输入”, vip全选后，输入J，让所有行上移 多行操作 IIdays = [&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;] 命令：2Gdf[$r,0f,v&lt;C-n&gt;…&lt;C-n&gt;c&lt;CR&gt;&lt;Up&gt;&lt;Del&gt;&lt;Right&gt;&lt;Right&gt;&lt;Right&gt;&lt;Del&gt; 解释： 2Gdf[，删除[前的内容 $r，到结尾，将[替换成, 0f,，到开头，查找到, 切换到v模式，选中所有的,，c插入，回车 上移一行，删除，移动到最右，删除 HTML加密 (?) 命令： 解释：]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Vim</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[回车、换行和文件末尾空行]]></title>
    <url>%2F2016%2F05%2F18%2Fcarriage-return-line-feed-new-line-end-file%2F</url>
    <content type="text"><![CDATA[回车和换行回车 (Carriage Return) 和换行 (Line Feed) 的区别，这里有一个历史原因可参考： 在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。 于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做”回车”，告诉打字机把打印头定位在左边界；另一个叫做”换行”，告诉打字机把纸向下移一行。 发明计算机时，这个概念被沿用下来，但因为条件的限制和设计者的喜好，有了一些分歧： Unix 系统里，每行结尾只有”&lt;换行&gt;”，即”\n” Windows 系统里面，每行结尾是”&lt;回车&gt;&lt;换行&gt;”，即”\r\n” 在老的 Mac 系统里，每行结尾是”&lt;回车&gt;”，即”\r” 我们来验证一下，我在 Windows 下用记事本新建一个文本文件，它的二进制编码如下： //源文件内容 hello hello2 //二进制内容 0000000: 6865 6c6c 6f0d 0a68 656c 6c6f 32 hello..hello2 同样在 Mac 下用 Vim 新建一个： //源文件内容 hello hello2 //二进制内容 0000000: 6865 6c6c 6f0a 6865 6c6c 6f32 0a hello.hello2. 0a是 LF 的 ASCII 编码, 0d是 CR 的 ASCII 编码。区别很明显了 Mac 下的文本文件在 Windows 下打开会成为一行，因为 Windows 只认识\r\n，也就是0d0a Windows 下的文本文件在 Mac 下打开，Vim 中会在每行末尾显示一个 ^M，(不是两个字符组成的) 文件末尾空行POSIX对行的定义如下： 3.206 Line A sequence of zero or more non- characters plus a terminating character. 行是由0个或者多个非 “换行” 符的字符组成，并且以 “换行” 符结尾。 这样做有什么好处呢，举个例子： //hello.c #include head.h print(&apos;hello&apos;) //world.c #include tail.h print(&apos;hello&apos;) 如果这两个文件都按 POSIX 规范来写， 在cat *.c之后，是没有问题的： //cat.c #include head.h print(&apos;hello&apos;) #include tail.h print(&apos;hello&apos;) 如果缺少最后一行的换行符（如 Windows 文件那样的定义），cat之后，就有问题了： //error.c #include head.h print(&apos;hello&apos;)#include tail.h print(&apos;hello&apos;) 所以，从这点去理解 POSIX 对行的定义，非常合理，对于任意文件的拼接，也各自保持了文件的完整性。 不遵守标准带来的则是：在一些编辑器下面，比如 Sublime，他把\n的当做了行之间的分隔符，于是文件最后一行的\n就看上去成了一个新的空行，这就是错误解读标准造成的，拼接文件时也会产生不必要的麻烦，比如上例。 \ No new line at end of file基于上面的原因，再去看 git diff 的\ No new line at end of file信息，就很好解释了。 各编辑器对于换行符的理解偏差，导致的文件确实发生了变化，多了或少了最后的0a，那么对于 diff 程序来说，这当然是不可忽略的，但因为0a是不可见字符，并且是长久以来的历史原因，所以 diff 程序有个专门的标记来说明这个变化，就是： \ No new line at end of file 各编辑器也有相应的办法去解决这个问题，比如 Sublime，在Default/Preferences.sublime-settings中设置： // Set to true to ensure the last line of the file ends in a newline // character when saving &quot;ensure_newline_at_eof_on_save&quot;: true, 所以，请遵守规范。]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>原理</tag>
      </tags>
  </entry>
</search>
