<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[博客迁移到Hexo遇到的一些问题]]></title>
    <url>%2F2017%2F09%2F27%2Fhexo-workflow%2F</url>
    <content type="text"><![CDATA[关于Hexo如何使用，网上已经有很多教程了，不再赘述。涉及的几个相关命令也就是: 1234$ npm install -g hexo$ hexo init$ hexo generate (hexo g)$ hexo server (hexo s) 正常情况下，这样就会启动本地的服务:http://localhost:4000，但现实总是残酷的， 由于国内XXX的网络环境，总会遇到各种各样的问题， 下面总结一下本博客迁移到Hexo过程中遇到的一些问题。 NPM 源node的包管理工具npm，默认使用国外的源，访问比较慢，建议换成国内源，一般是淘宝npm:1$ npm install -g cnpm --registry=https://registry.npm.taobao.org 这样就可以使用cnpm代替npm进行模块安装了:1$ cnpm install [name] 或者，使用nrm (npm的源管理工具):1234567891011$ npm install nrm$ nrm ls* npm ---- https://registry.npmjs.org/ cnpm --- http://r.cnpmjs.org/ taobao - https://registry.npm.taobao.org/ nj ----- https://registry.nodejitsu.com/ rednpm - http://registry.mirror.cqupt.edu.cn/ npmMirror https://skimdb.npmjs.com/registry/ edunpm - http://registry.enpmjs.org/$ nrm use taobao$ nrm test taobao Hexo 安装hexo-serverhexo server执行失败:1ERROR Plugin load filed: hexo-server 需要单独安装hexo-server:1$ npm install hexo-server --save node-sass1$ npm intall node-sass --save 如果出现如下情况:1234567891011121314151617$ node scripts/install.jsCannot download &quot;https://github.com/sass/node-sass/releases/download/v4.5.3/darwin-x64-51_binding.node&quot;: read ECONNRESETHint: If github.com is not accessible in your location try setting a proxy via HTTP_PROXY, e.g. export HTTP_PROXY=http://example.com:1234or configure npm proxy via npm config set proxy http://example.com:8080$ node-sass@4.5.3 postinstall /private/tmp/node_modules/node-sass$ node scripts/build.js 说明github访问比较慢，两种方法： 修改host: http://tool.chinaz.com/dns?type=1&amp;host=github.com&amp;ip=找一个TTL比较小的host，如: 1192.30.255.112 github.com 直接去github下载 https://github.com/sass/node-sass/releases/download/v4.5.3/darwin-x64-51_binding.node然后将该文件放到目录:~/.npm/node-sass/4.5.3/darwin-x64-51_binding.node再执行安装命令 1$ npm intall node-sass --save hexo-renderer-scss有些主题需要安装hexo-renderer-scss:1$ npm install hexo-renderer-scss --save 会出现错误:1234ERROR Plugin load failed: hexo-renderer-scssError: ENOENT: no such file or directory, scandir &apos;xxx/node_modules/node-sass/vendor&apos; at Object.fs.readdirSync (fs.js:914:18) ... 提示这个目录找不到，那我们手动创建好了:12$ mkdir xxx/node_modules/node-sass/vendor$ mkdir xxx/node_modules/hexo-renderer-scss/node_modules/node-sass/vendor 接下来还是报错:12345ERROR Plugin load failed: hexo-renderer-scssError: Missing binding xxx/node_modules/hexo-renderer-scss/node_modules/node-sass/vendor/darwin-x64-51/binding.nodeNode Sass could not find a binding for your current environment: OS X 64-bit with Node.js 7.xFound bindings for the following environments: 到这个目录下，把刚刚下载的darwin-x64-51_binding.node重命名复制进去好了:12$ mkdir xxx/node_modules/hexo-renderer-scss/node_modules/node-sass/vendor/darwin-x64-51/$ cp darwin-x64-51_binding.node xxx/node_modules/hexo-renderer-scss/node_modules/node-sass/vendor/darwin-x64-51/binding.node 页面空白有时执行hexo s后显示服务启动，但页面打开空白，显示Cannot GET /，这种情况有很多原因， 可以尝试:1234$ npm install$ hexo cl$ hexo g$ hexo s 如果还有问题，查看一下npm插件是否安装正常:12345678910111213141516171819$ npm ls --depth 0hexo-site@0.0.0 xxx├── hexo@3.3.9├── hexo-deployer-git@0.3.1├── hexo-generator-archive@0.1.4├── hexo-generator-baidu-sitemap@0.1.2├── hexo-generator-category@0.1.3├── hexo-generator-feed@1.2.2├── hexo-generator-index@0.2.1├── hexo-generator-sitemap@1.2.0├── hexo-generator-tag@0.2.0├── hexo-renderer-ejs@0.3.1├── hexo-renderer-marked@0.3.0├── hexo-renderer-scss@1.0.3├── hexo-renderer-stylus@0.3.3├── hexo-server@0.2.2└── node-sass@4.5.3npm ERR! invalid: hexo-generator-baidu-sitemap@0.0.8 xxx/node_modules/hexo-generator-baidu-sitemap/node_modules/hexo-generator-baidu-sitemap 可以看到hexo-generator-baidu-sitemap这个插件安装失败了，尝试重新安装或者删除它:12$ npm install hexo-generator-baidu-sitemap --save$ npm uninstall hexo-generator-baidu-sitemap 或者在package.json中将它删除掉。]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Objective-C中如何定义Block]]></title>
    <url>%2F2017%2F05%2F31%2Fhow-to-declare-block-in-oc%2F</url>
    <content type="text"><![CDATA[Declaration As a local variable: 1returnType (^blockName)(parameterTypes) = ^returnType(parameters) &#123;...&#125;; As a property: 1@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes); As a method parameter: 1- (void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName; As an argument to a method call: 1[someObject someMethodThatTakesABlock:^returnType (parameters) &#123;...&#125;]; As a typedef: 12typedef returnType (^TypeName)(parameterTypes);TypeName blockName = ^returnType(parameters) &#123;...&#125;; Hint block在ARC下是否声明为copy属性 It is still a good idea to declare block properties as having copy semantics since a block assigned to a strong property will in fact be copied. Apple recommends this as well: You should specify copy as the property attribute, because a block needs to be copied to keep track of its captured state outside of the original scope. This isn’t something you need to worry about when using Automatic Reference Counting, as it will happen automatically, but it’s best practice for the property attribute to show the resultant behavior.]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Block</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用VS2013分析程序CPU占用]]></title>
    <url>%2F2016%2F08%2F08%2Fdetect-cpu-usage-with-vs2013%2F</url>
    <content type="text"><![CDATA[最近开发的一个程序，用户反馈CPU占用非常高，基本把一个内核占用满了。 我自己在虚拟机中试了下，确实这样！ 在用户机器中获取了DUMP，只看到有几个线程一直在跑，调用堆栈中也看不到太多信息（主要是没有线程CPU占用信息），一时没有方法。 今天突然想到VS2013，新版本增加了一些功能，貌似有性能分析相关的。 找了一下，果然在调试菜单下发现了性能与诊断： 选择CPU使用率，就开始分析啦！ 很快就给出了分析结果： 哈哈！瞬间定位CPU占用元凶，原来是一个后台线程一直在跑（空转），设计不合理。这个线程最早设计成自驱动的，找到原因就好办了，改成被驱动式就行了！]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Virtual Studio</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何学习Python爬虫]]></title>
    <url>%2F2016%2F07%2F14%2Fhow-to-learn-web-spider-with-python%2F</url>
    <content type="text"><![CDATA[转载自知乎专栏学习编程 感谢作者路人甲的整理 如何学习python爬虫[入门篇]？想写这么一篇文章，但是知乎社区爬虫大神很多，光是整理他们的答案就够我这篇文章的内容了。对于我个人来说我更喜欢那种非常实用的教程，这种教程对于想直接上手爬虫做一些小东西的朋友来说是极好的。 用一个精彩的回答作为开头：如何入门 python 爬虫？ - 谢科的回答 如果你想学习编程，但是找不到学习路径和资源，欢迎关注专栏：学习编程 python爬虫学习教程 来自博客：http://cuiqingcai.com/1052.html 一、爬虫入门 python爬虫入门一之综述 python爬虫入门二之爬虫基础了解 python爬虫入门三之urllib库的基本使用 python爬虫入门四之urllib库的高级用法 python爬虫入门五之urlerror异常处理 python爬虫入门六之cookie的使用 python爬虫入门七之正则表达式 二、爬虫实战 python爬虫实战一之爬取糗事百科段子 python爬虫实战二之爬取百度贴吧帖子 python爬虫实战三之实现山东大学无线网络掉线自动重连 python爬虫实战四之抓取淘宝mm照片 python爬虫实战五之模拟登录淘宝并获取所有订单 python爬虫实战六之抓取爱问知识人问题并保存至数据库 python爬虫实战七之计算大学本学期绩点 python爬虫实战八之利用selenium抓取淘宝匿名旺旺 三、爬虫利器 python爬虫利器一之requests库的用法 python爬虫利器二之beautiful soup的用法 python爬虫利器三之xpath语法与lxml库的用法 python爬虫利器四之phantomjs的用法 python爬虫利器五之selenium的用法 python爬虫利器六之pyquery的用法 四、爬虫进阶 python爬虫进阶一之爬虫框架概述 python爬虫进阶二之pyspider框架安装配置 python爬虫进阶三之爬虫框架scrapy安装配置 python爬虫进阶四之pyspider的用法 python爬虫入门教程 来自CSDN专栏：http://blog.csdn.net/column/details/why-bug.html [python]网络爬虫（一）：抓取网页的含义和url基本构成 [Python]网络爬虫（二）：利用urllib2通过指定的URL抓取网页内容 [Python]网络爬虫（三）：异常的处理和HTTP状态码的分类 [Python]网络爬虫（四）：Opener与Handler的介绍和实例应用 [Python]网络爬虫（五）：urllib2的使用细节与抓站技巧 [Python]网络爬虫（六）：一个简单的百度贴吧的小爬虫 [Python]网络爬虫（七）：Python中的正则表达式教程 [Python]网络爬虫（八）：糗事百科的网络爬虫（v0.3）源码及解析(简化更新) [Python]网络爬虫（九）：百度贴吧的网络爬虫（v0.4）源码及解析 [Python]网络爬虫（十）：一个爬虫的诞生全过程（以山东大学绩点运算为例） [Python]网络爬虫（十一）：亮剑！爬虫框架小抓抓Scrapy闪亮登场！ [Python]网络爬虫（十二）：爬虫框架Scrapy的第一个爬虫示例入门教程 实战练习 来自CSDN博客：http://blog.csdn.net/cwyalpha/ Python爬虫学习记录（0）——Python 爬虫抓站 记录（虾米，百度，豆瓣，新浪微博） Python爬虫学习记录（1）——Xiami全站播放数 Python爬虫学习记录（2）——LDA处理歌词 百度音乐带标签，作曲，演唱者，类别的歌词数据 Python爬虫学习记录（4）——传说中的足彩倍投法。。好像也不是那么靠谱 2011~2013.5全球所有足球比赛比分数据以及足彩各公司盘口 Python爬虫学习记录（3）——用Python获取虾米加心歌曲，并获取MP3下载地址 Python爬虫学习记录（5）——python mongodb + 爬虫 + web.py 的acfun视频排行榜 来自博客：http://aljun.me/ 爬虫教程（1）基础入门 爬虫教程（2）性能进阶 知乎用户信息爬虫（规模化爬取） 用scrapy爬取豆瓣电影新片榜 用scrapy对豆瓣top250页面爬取（多页面爬取） 用scrapy自动爬取下载图片 用scrapy自动下载石原sama的豆瓣影人图集(727张图片，自动下载）]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本地安装Jekyll调试环境（Windows）]]></title>
    <url>%2F2016%2F06%2F05%2Finstall-jekyll-locally%2F</url>
    <content type="text"><![CDATA[安装Ruby和Ruby DevKit Ruby 2.2.4 Ruby DevKit 切换到安装目录： 123$ cd C:\RubyDevKit$ ruby dk.rb init$ ruby dk.rb install 安装Jekyll 12$ gem install jekyll$ gem install wdm 切换到博客目录运行 12$ jekyll build [--watch/-w]$ jekyll serve [--watch/-w] 用浏览器打开http://127.0.0.1:4000，即可看到效果，而且在修改文件的同时刷新页面即可实时更新。 可以通过–port 888指定端口号，更多命令行参数参考官方手册 安装有问题，可以参考更多文档： Running Jekyll on Windows Jekyll Windows Setup Jekyll on Windows]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>Jekyll</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[介绍几个常用的vim插件]]></title>
    <url>%2F2016%2F06%2F03%2Fsome-vim-plugins%2F</url>
    <content type="text"><![CDATA[vim-multiple-cursors编辑同一变量def hello(poorly_named_var) poorly_named_var ||= &quot;Nameless&quot; puts(&quot;Hi, &quot; + poorly_named_var) end 命令：2Gfp&lt;C-n&gt;&lt;C-n&gt;&lt;C-n&gt;cname 解释：到第二行，fp找到p，三次选中三个单词，c进入编辑 多行操作 I_ Mon Tue Wed Thu Fri Sat Sun 命令：2Gvip&lt;C-n&gt;i&quot;&lt;Right&gt;&lt;Right&gt;&lt;Right&gt;&quot;,&lt;Esc&gt;vipJ$r]Idays = [ 解释： 2Gvip到第二行，全选 i在所有行开头插入光标，输入” 移动到行尾，输入”, vip全选后，输入J，让所有行上移 多行操作 IIdays = [&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;] 命令：2Gdf[$r,0f,v&lt;C-n&gt;…&lt;C-n&gt;c&lt;CR&gt;&lt;Up&gt;&lt;Del&gt;&lt;Right&gt;&lt;Right&gt;&lt;Right&gt;&lt;Del&gt; 解释： 2Gdf[，删除[前的内容 $r，到结尾，将[替换成, 0f,，到开头，查找到, 切换到v模式，选中所有的,，c插入，回车 上移一行，删除，移动到最右，删除 HTML加密 (?) 命令： 解释：]]></content>
      <categories>
        <category>TextEditor</category>
      </categories>
      <tags>
        <tag>Vim</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[回车、换行和文件末尾空行]]></title>
    <url>%2F2016%2F05%2F18%2Fcarriage-return-line-feed-new-line-end-file%2F</url>
    <content type="text"><![CDATA[回车和换行回车 (Carriage Return) 和换行 (Line Feed) 的区别，这里有一个历史原因可参考： 在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。 于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做”回车”，告诉打字机把打印头定位在左边界；另一个叫做”换行”，告诉打字机把纸向下移一行。 发明计算机时，这个概念被沿用下来，但因为条件的限制和设计者的喜好，有了一些分歧： Unix 系统里，每行结尾只有”&lt;换行&gt;”，即”\n” Windows 系统里面，每行结尾是”&lt;回车&gt;&lt;换行&gt;”，即”\r\n” 在老的 Mac 系统里，每行结尾是”&lt;回车&gt;”，即”\r” 我们来验证一下，我在 Windows 下用记事本新建一个文本文件，它的二进制编码如下： //源文件内容 hello hello2 //二进制内容 0000000: 6865 6c6c 6f0d 0a68 656c 6c6f 32 hello..hello2 同样在 Mac 下用 Vim 新建一个： //源文件内容 hello hello2 //二进制内容 0000000: 6865 6c6c 6f0a 6865 6c6c 6f32 0a hello.hello2. 0a是 LF 的 ASCII 编码, 0d是 CR 的 ASCII 编码。区别很明显了 Mac 下的文本文件在 Windows 下打开会成为一行，因为 Windows 只认识\r\n，也就是0d0a Windows 下的文本文件在 Mac 下打开，Vim 中会在每行末尾显示一个 ^M，(不是两个字符组成的) 文件末尾空行POSIX对行的定义如下： 3.206 Line A sequence of zero or more non- characters plus a terminating character. 行是由0个或者多个非 “换行” 符的字符组成，并且以 “换行” 符结尾。 这样做有什么好处呢，举个例子： //hello.c #include head.h print(&apos;hello&apos;) //world.c #include tail.h print(&apos;hello&apos;) 如果这两个文件都按 POSIX 规范来写， 在cat *.c之后，是没有问题的： //cat.c #include head.h print(&apos;hello&apos;) #include tail.h print(&apos;hello&apos;) 如果缺少最后一行的换行符（如 Windows 文件那样的定义），cat之后，就有问题了： //error.c #include head.h print(&apos;hello&apos;)#include tail.h print(&apos;hello&apos;) 所以，从这点去理解 POSIX 对行的定义，非常合理，对于任意文件的拼接，也各自保持了文件的完整性。 不遵守标准带来的则是：在一些编辑器下面，比如 Sublime，他把\n的当做了行之间的分隔符，于是文件最后一行的\n就看上去成了一个新的空行，这就是错误解读标准造成的，拼接文件时也会产生不必要的麻烦，比如上例。 \ No new line at end of file基于上面的原因，再去看 git diff 的\ No new line at end of file信息，就很好解释了。 各编辑器对于换行符的理解偏差，导致的文件确实发生了变化，多了或少了最后的0a，那么对于 diff 程序来说，这当然是不可忽略的，但因为0a是不可见字符，并且是长久以来的历史原因，所以 diff 程序有个专门的标记来说明这个变化，就是： \ No new line at end of file 各编辑器也有相应的办法去解决这个问题，比如 Sublime，在Default/Preferences.sublime-settings中设置： // Set to true to ensure the last line of the file ends in a newline // character when saving &quot;ensure_newline_at_eof_on_save&quot;: true, 所以，请遵守规范。]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我为什么写博客？]]></title>
    <url>%2F2015%2F12%2F18%2Fwhy-blog%2F</url>
    <content type="text"><![CDATA[世界这么乱，装纯给谁看写博客这个不知道几个“互联网世纪”前的东西，现在还有必要拿出来说吗？不想用太多的理论去说这个命题，先看看两个最近对我影响比较大的两个博客： Steve Losh Derek Sivers 第一个是Steve Losh的博客，我在搜索了VIM相关的关键字之后被带到了这里。简洁的风格和关屏的利落就已经吸引了我，顺手点开其他的文章看了看，博主非常的谨慎认真，每一篇都是高质量的作品，看得出他的用心，整个网站也是异常的简洁舒适，深深的被这种淡然的心态打动，躲进小楼成一统，哪管他春夏与秋冬。再看看他的介绍： “I’m a programmer, photographer, dancer &amp; bassist from Rochester, New York.” 呵呵，他完全就过着我期望的生活。 第二位博主的‘Co-op Business Model’文章也是让我茅厕顿开，这种分享的精神，用博主自己活生生的例子讲述出来之后，读者自然会被感动的，我也在团队内分享过这篇文章，下面我简要介绍一下他的事迹吧： 1994年，他把需要邮寄才能得到的版权申请表单扫描上传到网上，为大家申请提供方便的下载服务，直到版权机构将表单上网之前，他的网站是全美唯一一个可以下载到表单的地方，他也并没有盈利。 1995年，他为自己的乐队注册了一个名字，并且把注册过程详细的写在自己的博客上，很长一段时间内，他的这篇文章几乎成了注册乐队名称的标准教程。 1996年，他有了一个小唱片公司，也就有了一个条形码账户，他需要支付$750给条码协会，这样他就拥有了十万个条码，一开始他免费把这些条码给朋友们要出售的CD用，后来，越来越多人知道了他有条码，又懒得去自己申请账户，就给他付一定的费用，方便的使用，他每个收费$20，在过去的12年里，他靠出售这个条码就赚到了二百万美元。 1997年，他花费$1000申请了一个信用卡商户账户，用来销售自己的CD，一开始也免费给他的做音乐的朋友们帮忙卖，后来有越来越多的陌生人希望能使用他的账号，省的自己去申请，因为他有一些劳动量，所以也收取一定费用，每张专辑收取$35的制作费，然后每卖一张收$4，在过去的12年中，他赚到了二千万美元。 1999年，他学会了制作网站，一开始是为了展示自己的CD，后来他的朋友们抱怨自己的网站服务商很糟糕，希望能使用Derek Sivers的系统，因为也有一些劳动量，所以会一开始收取$300，然后每个月收取$20，在过去的9年中，他赚到了五百万美元。 2000年以后，他会无偿的分享所有他学到的东西，或许“他不是最聪明的人”，但是分享没有什么成本，而且这是正确的事，所以在后来的11年里，他收获了很多的好运与快乐，遇见了很多有趣的人。 找到了一个神交的外国博主，又有这么励志“好人好报”的故事，我想大道理不用讲太多也都明白了。 还有一篇理论性很强的文章做参考，我为什么写博客。 那些虚的没用，说点实际的或许这些看起来很美好的东西，你会觉得离自己很远，那就说点直接的收益，看看是否够诱人。 我还是先推荐一篇文章：怎样花两年时间去面试一个人，招聘永远是公司和个人的难题，双方的信息不对称，导致这个矛盾无法调和，这篇文章就是告诉你，如何自己去推销自己，让公司得到你的全部优质信息，尤其在现在的网络环境下，将自己工作有用的能力搬上网，那么就是最好的能力证明，就是最好的面试答案。无论你是程序员，还是设计师。 或许你会想，好吧好吧，那我找个博客站开一个博客好了，我不太会同意这个做法，有一个个人的品牌，对于自己的发展只有好处，行走网络江湖，有同一个ID标识，无论在哪里都会让人看到你，这样长期的潜移默化，个人的品牌效力也就展现出来了。然后有一个自己独立的域名，并且用心去经营，肯定会有人欣赏的。而且经过我的一番研究，成本并不是很高。 我期望的博客内容，并不是贴一段代码，或者胡言乱语两句，具体的质量可以参考Steve Losh，这样的高质量，更能展现自己的态度，或许你说有一些小心得小点滴也想和大家分享，那也可以在自己的空间下开一个Wiki频道，专门存放琐碎的知识点。 高质量的博文，肯定需要自己缜密的思考，并且需要一定的文笔才能将自己的想法完整清晰的表达出来，我在这两个方面都还差了很多，还需要大量的练习才好，给自己这样的机会。 在快知识、微段子横行的今天，能对一个个问题深入的去思考，一方面得到的是心灵的平静，更多的则是深入思考之后的收获的喜悦感，会有不一样的体会的。 技术很简单，不用担心或者你很幸运不是一个程序员，或者你是一个不用搞这些乱七八糟东西的程序员，那么相信我，你一样可以搭起来一个跟我的一模一样的个人站点的。 我要特别鸣谢以下几个站点、技术： GoDaddy DNSPod GitHub Jekyll Disqus 下面我来做一个简要说明，完整的搭建方法，我后面会专门写一篇博客分享给大家，等不及的可以自己去找资料哈。 GoDaddy &amp; DNSPodGoDaddy是一家非常不错的域名注册商，良好的用户体验，飞快的生效速度，给力的优惠码，也支持支付宝，永远不用担心国内那些流氓厂商的流氓行为，注册了域名，就可以放心不会被别人抢走。在Godaddy注册域名是一件很简单的事情，按照提示走就完全没有问题，唯一需要动脑筋的可能是，你要想一个既有个人标识，又没有被别人注册的域名了，我觉得我的BeiYuu还是不错的，呵呵。 Godaddy一切都很完美，直到遇到了GFW，原因你肯定懂。前段时间推上风传Godaddy的DNS服务器被墙，导致域名不能解析，看起来好像自己的站被墙了一样，这个确实是个闹心的事情，还好国内有DNS服务的替代产品，而且做得还非常的不错，也是免费的，功能强大，速度快，不用担心被和谐，所以隆重推荐DNSPod给大家，可以试用一下，把DNS服务迁移到DNSPod来，解决后顾之忧，配置比较简单，不懂的可以等我后面的博客啦，哈。 GitHub &amp; JekyllGitHub是一个非常优秀的产品，爆发式的增长，各大优质开源软件的蜂涌而至，只能说明人们太需要他了。Social Coding是他的Slogan，产品的设计确实解决了很多代码交流的难题，让世界更平，让交流更畅，关于Git的学习，大家可以移步这里Pro Git中文版，这也是一个本身就在Github维护的一个项目，高质量的翻译了Git入门书，讲解详细，是学习Git的好资料。 GitHub是一个伟大的产品，GitHub Pages是他伟大的一部分，GitHub Pages基于Jekyll博客引擎，当我深入的研究了他之后，我深深的想给Jekyll的作者一个拥抱，列举一下Jekyll的优点： 可以单独放在自己的服务器上，他也是GitHub Pages的基础，质量可靠 将博客最重要的功能抽取出来，去除了WordPress的复杂、烦躁的东西，一切都是清晰可控的 可以方便的使用Markdown等其他标记语言清晰、简洁的文件组织，完美的永久链接方案，既漂亮、又可定制博客静态化，速度快 Jekyll是完美的 DisqusJekyll都很不错，但是可能有些童鞋会不满意于他不提供评论功能，这个时候，Disqus的出现就显得是雪中送炭了。 Disqus是一个社会化的评论解决方案，请允许我使用这个烂透了的词，调用它的接口非常简单，在自己的页面加载他的一段JS代码即可，如果别人注册了Disqus，那么就可以方便的留言，交流，一处登录，处处方便，而且Disqus也提供了一些spam等策略，不用自己操心了，并且可以和一些现有的博客系统很好的转换对接。越来越多的网站开始使用Disqus的服务了，这是一个非常不错的趋势，Jekyll配合Disqus实在是完美了。我别无所求了。 TL;DR写到这里，基本的点已经介绍完毕，看看Jekyll生成的博客页面，我心满意足，虽然文笔很烂，语句多不通顺，但是这是一个新的开始了，我觉得心灵都纯洁了不少，这不是发一条微博什么能带来的快乐。 对于那些对上述技术不是很熟悉的童鞋来说，搭建起来可能还是需要花费些功夫的，我会在后面写一篇专门的教程，给有需要的人，等不及了的，可以自己研究下，生命在于折腾。]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Github Pages建独立博客]]></title>
    <url>%2F2015%2F11%2F22%2Fgithub-pages%2F</url>
    <content type="text"><![CDATA[Github很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。Github作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如jQuery、Twitter等。为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，Github替你想到了这一点，他提供了Github Pages的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。 Github Pages有以下几个优点： 轻量级的博客系统，没有麻烦的配置 使用标记语言，比如Markdown 无需自己搭建服务器 根据Github的限制，对应的每个站有300MB空间 可以绑定自己的域名 当然他也有缺点： 使用Jekyll模板系统，相当于静态页发布，适合博客，文档介绍等。 动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。 基于Git，很多东西需要动手，不像Wordpress有强大的后台 大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。 购买、绑定独立域名虽说Godaddy曾支持过SOPA，并且首页放着极其不专业的大胸美女，但是作为域名服务商他做的还不赖，选择它最重要的原因是他支持支付宝，没有信用卡有时真的很难过。 域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力，优惠码也遍地皆是。域名的配置需要提醒一下，因为伟大英明的GFW的存在，我们必须多做些事情。 流传Godaddy的域名解析服务器被墙掉，导致域名无法访问，后来这个事情在BeiYuu也发生了，不得已需要把域名解析服务迁移到国内比较稳定的服务商处，这个迁移对于域名来说没有什么风险，最终的控制权还是在Godaddy那里，你随时都可以改回去。 我们选择DNSPod的服务，他们的产品做得不错，易用、免费，收费版有更高端的功能，暂不需要。注册登录之后，按照DNSPod的说法，只需三步（我们插入一步）： 首先添加域名记录，可参考DNSPod的帮助文档：https://www.dnspod.cn/Support 在DNSPod自己的域名下添加一条A记录，地址就是Github Pages的服务IP地址：207.97.227.245 在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。如果你不明白在哪里修改，可以参考这里：Godaddy注册的域名如何使用DNSPod 等待域名解析生效 域名的配置部分完成，跪谢方校长。 配置和使用GithubGit是版本管理的未来，他的优点我不再赘述，相关资料很多。推荐这本Git中文教程。 要使用Git，需要安装它的客户端，推荐在Linux下使用Git，会比较方便。Windows版的下载地址在这里：http://code.google.com/p/msysgit/downloads/list。其他系统的安装也可以参考官方的安装教程。 下载安装客户端之后，各个系统的配置就类似了，我们使用windows作为例子，Linux和Mac与此类似。 在Windows下，打开Git Bash，其他系统下面则打开终端（Terminal）： 1、检查SSH keys的设置首先我们需要检查你电脑上现有的ssh key： $ cd ~/.ssh 如果显示“No such file or directory”，跳到第三步，否则继续。 2、备份和移除原来的ssh key设置：因为已经存在key文件，所以需要备份旧的数据并删除： $ ls config id_rsa id_rsa.pub known_hosts $ mkdir key_backup $ cp id_rsa* key_backup $ rm id_rsa* 3、生成新的SSH Key：输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。 $ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot; Generating public/private rsa key pair. Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt; 然后系统会要你输入加密串（Passphrase）： Enter passphrase (empty for no passphrase):&lt;输入加密串&gt; Enter same passphrase again:&lt;再次输入加密串&gt; 最后看到这样的界面，就成功设置ssh key了： 4、添加SSH Key到GitHub：在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。 用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。 在GitHub的主页上点击设置按钮： 选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可： PS：如果需要配置多个GitHub账号，可以参看这个多个github帐号的SSH key切换，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令git config --global --unset user.email删除用户账户设置，在每一个repo下面使用git config --local user.email &#39;你的github邮箱@mail.com&#39; 命令单独设置用户账户信息 5、测试一下可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改： $ ssh -T git@github.com 如果是下面的反应： The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)? 不要紧张，输入yes就好，然后会看到： Hi &lt;em&gt;username&lt;/em&gt;! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 6、设置你的账号信息现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。 Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。 $ git config --global user.name &quot;你的名字&quot; $ git config --global user.email &quot;your_email@youremail.com&quot; 设置GitHub的token2012-4-28补充：新版的接口已经不需要配置token了，所以下面这段可以跳过了 有些工具没有通过SSH来链接GitHub。如果要使用这类工具，你需要找到然后设置你的API Token。 在GitHub上，你可以点击Account Setting &gt; Account Admin： 然后在你的命令行中，输入下面的命令，把token添加进去： $ git config --global user.name &quot;你的名字&quot; $ git config --global user.token 0123456789your123456789token 如果你改了GitHub的密码，需要重新设置token。 成功了好了，你已经可以成功连接GitHub了。 使用GitHub Pages建立博客与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。 User &amp; Organization Pages想建立个人博客是用的第一种，形如beiyuu.github.io这样的可访问的站，每个用户名下面只能建立一个，创建之后点击Admin进入项目管理，可以看到是这样的：而普通的项目是这样的，即使你也是用的othername.github.io： 创建好username.github.io项目之后，提交一个index.html文件，然后push到GitHub的master分支（也就是普通意义上的主干）。第一次页面生效需要一些时间，大概10分钟左右。 生效之后，访问username.github.io就可以看到你上传的页面了，beiyuu.github.io就是一个例子。 关于第二种项目pages，简单提一下，他和用户pages使用的后台程序是同一套，只不过它的目的是项目的帮助文档等跟项目绑定的内容，所以需要在项目的gh-pages分支上去提交相应的文件，GitHub会自动帮你生成项目pages。具体的使用帮助可以参考Github Pages的官方文档： 绑定域名我们在第一部分就提到了在DNS部分的设置，再来看在GitHub的配置，要想让username.github.io能通过你自己的域名来访问，需要在项目的根目录下新建一个名为CNAME的文件，文件内容形如： beiyuu.com 你也可以绑定在二级域名上： blog.beiyuu.com 需要提醒的一点是，如果你使用形如beiyuu.com这样的一级域名的话，需要在DNS处设置A记录到207.97.227.245（这个地址会有变动，这里查看），而不是在DNS处设置为CNAME的形式，否则可能会对其他服务（比如email）造成影响。 设置成功后，根据DNS的情况，最长可能需要一天才能生效，耐心等待吧。 Jekyll模板系统GitHub Pages为了提供对HTML内容的支持，选择了Jekyll作为模板系统，Jekyll是一个强大的静态模板系统，作为个人博客使用，基本上可以满足要求，也能保持管理的方便，你可以查看Jekyll官方文档。 你可以直接fork我的项目，然后改名，就有了你自己的满足Jekyll要求的文档了，当然你也可以按照下面的介绍自己创建。 Jekyll基本结构Jekyll的核心其实就是一个文本的转换引擎，用你最喜欢的标记语言写文档，可以是Markdown、Textile或者HTML等等，再通过layout将文档拼装起来，根据你设置的URL规则来展现，这些都是通过严格的配置文件来定义，最终的产出就是web页面。 基本的Jekyll结构如下： |-- _config.yml |-- _includes |-- _layouts | |-- default.html | `-- post.html |-- _posts | |-- 2007-10-29-why-every-programmer-should-play-nethack.textile | `-- 2009-04-26-barcamp-boston-4-roundup.textile |-- _site `-- index.html 简单介绍一下他们的作用： _config.yml配置文件，用来定义你想要的效果，设置之后就不用关心了。 _includes可以用来存放一些小的可复用的模块，方便通过{ % include file.ext %}（去掉前两个{中或者{与%中的空格，下同）灵活的调用。这条命令会调用_includes/file.ext文件。 _layouts这是模板文件存放的位置。模板需要通过YAML front matter来定义，后面会讲到，{ { content }}标记用来将数据插入到这些模板中来。 _posts你的动态内容，一般来说就是你的博客正文存放的文件夹。他的命名有严格的规定，必须是2012-02-22-artical-title.MARKUP这样的形式，MARKUP是你所使用标记语言的文件后缀名，根据_config.yml中设定的链接规则，可以根据你的文件名灵活调整，文章的日期和标记语言后缀与文章的标题的独立的。 _site这个是Jekyll生成的最终的文档，不用去关心。最好把他放在你的.gitignore文件中忽略它。 其他文件夹你可以创建任何的文件夹，在根目录下面也可以创建任何文件，假设你创建了project文件夹，下面有一个github-pages.md的文件，那么你就可以通过yoursite.com/project/github-pages访问的到，如果你是使用一级域名的话。文件后缀可以是.html或者markdown或者textile。这里还有很多的例子：https://github.com/mojombo/jekyll/wiki/Sites Jekyll的配置Jekyll的配置写在_config.yml文件中，可配置项有很多，我们不去一一追究了，很多配置虽有用但是一般不需要去关心，官方配置文档有很详细的说明，确实需要了可以去这里查，我们主要说两个比较重要的东西，一个是Permalink，还有就是自定义项。 Permalink项用来定义你最终的文章链接是什么形式，他有下面几个变量： year 文件名中的年份 month 文件名中的月份 day 文件名中的日期 title 文件名中的文章标题 categories 文章的分类，如果文章没有分类，会忽略 i-month 文件名中的除去前缀0的月份 i-day 文件名中的除去前缀0的日期 看看最终的配置效果： permalink: pretty /2009/04/29/slap-chop/index.html permalink: /:month-:day-:year/:title.html /04-29-2009/slap-chop.html permalink: /blog/:year/:month/:day/:title /blog/2009/04/29/slap-chop/index.html 我使用的是： permalink: /:title /github-pages 自定义项的内容，例如我们定义了title:BeiYuu的博客这样一项，那么你就可以在文章中使用{ { site.title }}来引用这个变量了，非常方便定义些全局变量。 YAML Front Matter和模板变量对于使用YAML定义格式的文章，Jekyll会特别对待，他的格式要求比较严格，必须是这样的形式： --- layout: post title: Blogging Like a Hacker --- 前后的---不能省略，在这之间，你可以定一些你需要的变量，layout就是调用_layouts下面的某一个模板，他还有一些其他的变量可以使用： permalink 你可以对某一篇文章使用通用设置之外的永久链接 published 可以单独设置某一篇文章是否需要发布 category 设置文章的分类 tags 设置文章的tag 上面的title就是自定义的内容，你也可以设置其他的内容，在文章中可以通过{ { page.title }}这样的形式调用。 模板变量，我们之前也涉及了不少了，还有其他需要的变量，可以参考官方的文档：https://github.com/mojombo/jekyll/wiki/template-data 使用Disqus管理评论模板部分到此就算是配置完毕了，但是Jekyll只是个静态页面的发布系统，想做到关爽场倒是很容易，如果想要评论呢？也很简单。 现在专做评论模块的产品有很多，比如Disqus，还有国产的多说，Disqus对现在各种系统的支持都比较全面，到写博客为止，多说现在仅是WordPress的一个插件，所以我这里暂时也使用不了，多说与国内的社交网络紧密结合，还是有很多亮点的，值得期待一下。我先选择了Disqus。 注册账号什么的就不提了，Disqus支持很多的博客平台，参见下图： 我们选择最下面的Universal Code就好，然后会看到一个介绍页面，把下面这段代码复制到你的模板里面，可以只复制到显示文章的模板中： &lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */ var disqus_shortname = &apos;example&apos;; // required: replace example with your forum shortname 这个地方需要改成你配置的网站名 /* * * DON&apos;T EDIT BELOW THIS LINE * * */ (function() { var dsq = document.createElement(&apos;script&apos;); dsq.type = &apos;text/javascript&apos;; dsq.async = true; dsq.src = &apos;http://&apos; + disqus_shortname + &apos;.disqus.com/embed.js&apos;; (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(dsq); })(); &lt;/script&gt; &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt; &lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;blog comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt; 配置完之后，你也可以做一些异步加载的处理，提高性能，比如我就在最开始页面打开的时候不显示评论，当你想看评论的时候，点击“显示评论”再加载Disqus的模块。代码很简单，你可以参考我的写法。 $(&apos;#disqus_container .comment&apos;).on(&apos;click&apos;,function(){ $(this).html(&apos;加载中...&apos;); var disqus_shortname = &apos;beiyuu&apos;; var that = this; BYB.includeScript(&apos;http://&apos; + disqus_shortname + &apos;.disqus.com/embed.js&apos;,function(){$(that).remove()}); //这是一个加载js的函数 }); 如果你不喜欢Disqus的样式，你也可以根据他生成的HTML结构，自己改写样式覆盖它的，Disqus现在也提供每个页面的评论数接口，帮助文档在这里可以看到。 代码高亮插件如果写技术博客，代码高亮少不了，有两个可选插件DlHightLight代码高亮组件和Google Code Prettify。DLHightLight支持的语言相对较少一些，有js、css、xml和html，Google的高亮插件基本上任何语言都支持，也可以自定义语言，也支持自动识别，也有行号的特别支持。 Google的高亮插件使用也比较方便，只需要在&lt;pre&gt;的标签上加入prettyprint即可。所以我选择了Google Code Prettify。 搭建本地jekyll环境这里主要介绍一下在Mac OS X下面的安装过程，其他操作系统可以参考官方的jekyll安装。 作为生活在水深火热的墙内人民，有必要进行下面一步修改gem的源，方便我们更快的下载所需组建： sudo gem sources --remove http://rubygems.org/ sudo gem sources -a http://ruby.taobao.org/ 然后用Gem安装jekyll $ gem install jekyll 不过一般如果有出错提示，你可能需要这样安装： $ sudo gem install jekyll 我到了这一步的时候总是提示错误Failed to build gem native extension，很可能的一个原因是没有安装rvm，rvm的安装可以参考这里，或者敲入下面的命令： $ curl -L https://get.rvm.io | bash -s stable --ruby 然后还需要安装Markdown的解释器，这个需要在你的_config.yml里面设置markdown:rdiscount： $ gem install jekyll rdiscount 好了，如果一切顺利的话，本地环境就基本搭建完成了，进入之前我们建立的博客目录，运行下面的命令： $ jekyll serve --watch 这个时候，你就可以通过localhost:4000来访问了。还有关于jekyll bootstrap的资料，需要自己修改调试的，可以研究一下。 我在这个过程中还遇到两个诡异的没有解决的问题，一个是我放在根目录下面的blog.md等文件，在GitHub的pages服务上一切正常，可以通过beiyuu.com/blog访问的到，但是在本地环境下，总是not found，很是让人郁闷，看生成的_site目录下面的文件，也是正常的blog.html，但就是找不到，只有当我把URL改为localhost:4000/blog.html的时候，才能访问的到，环境不同真糟糕。 还有一个是关于category的问题，根据YAML的语法，我们在文章头部可以定义文章所属的类别，也可以定义为category:[blog,rss]这样子的多类别，我在本地试一切正常，但是push到GitHub之后，就无法读取了，真让人着急，没有办法，只能采用别的办法满足我的需求了。这里还有一篇Jekyll 本地调试之若干问题，安装中如果有其他问题，也可以对照参考一下。 结语如果你跟着这篇不那么详尽的教程，成功搭建了自己的博客，恭喜你！剩下的就是保持热情的去写自己的文章吧。]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Jekyll</tag>
        <tag>Blog</tag>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
